const assert = require("assert")
const algo_mod = require("../docking_algorithms.js")

// plus test

let res = algo_mod.plus([1,2,3],[4,5,6])

assert(res.length === 3)

assert(res[0] === 5)
assert(res[1] === 7)
assert(res[2] === 9)

// neiburrs test
// candidate should be valid (though these sporadic tests in some places but not in others are hilarious)
// --- this is a TODO

assert.throws(_ => algo.mod.neighbors({ problem: { valid: _ => 0 } }, 1))

//

let vector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

let neiburrs = algo_mod.neighbors({ problem: { valid: _ => 1, fitness: _ => 10000 } }, { vector: vector })

assert(neiburrs.length === 24)

assert(neiburrs[0].fitness === 10000)
assert(neiburrs[0].vector.length === 12)
assert(neiburrs[0].vector[0]  === 5)
assert(neiburrs[0].vector[1]  === 0)
assert(neiburrs[0].vector[2]  === 0)
assert(neiburrs[0].vector[3]  === 0)
assert(neiburrs[0].vector[4]  === 0)
assert(neiburrs[0].vector[5]  === 0)
assert(neiburrs[0].vector[6]  === 0)
assert(neiburrs[0].vector[7]  === 0)
assert(neiburrs[0].vector[8]  === 0)
assert(neiburrs[0].vector[9]  === 0)
assert(neiburrs[0].vector[10] === 0)
assert(neiburrs[0].vector[11] === 0)

assert(neiburrs[1].fitness === 10000)
assert(neiburrs[1].vector.length === 12)
assert(neiburrs[1].vector[0]  === -5)
assert(neiburrs[1].vector[1]  === 0)
assert(neiburrs[1].vector[2]  === 0)
assert(neiburrs[1].vector[3]  === 0)
assert(neiburrs[1].vector[4]  === 0)
assert(neiburrs[1].vector[5]  === 0)
assert(neiburrs[1].vector[6]  === 0)
assert(neiburrs[1].vector[7]  === 0)
assert(neiburrs[1].vector[8]  === 0)
assert(neiburrs[1].vector[9]  === 0)
assert(neiburrs[1].vector[10] === 0)
assert(neiburrs[1].vector[11] === 0)

assert(neiburrs[2].fitness === 10000)
assert(neiburrs[2].vector.length === 12)
assert(neiburrs[2].vector[0]  === 0)
assert(neiburrs[2].vector[1]  === 5)
assert(neiburrs[2].vector[2]  === 0)
assert(neiburrs[2].vector[3]  === 0)
assert(neiburrs[2].vector[4]  === 0)
assert(neiburrs[2].vector[5]  === 0)
assert(neiburrs[2].vector[6]  === 0)
assert(neiburrs[2].vector[7]  === 0)
assert(neiburrs[2].vector[8]  === 0)
assert(neiburrs[2].vector[9]  === 0)
assert(neiburrs[2].vector[10] === 0)
assert(neiburrs[2].vector[11] === 0)

assert(neiburrs[3].vector.length === 12)
assert(neiburrs[3].vector[0]  === 0)
assert(neiburrs[3].vector[1]  === -5)
assert(neiburrs[3].vector[2]  === 0)
assert(neiburrs[3].vector[3]  === 0)
assert(neiburrs[3].vector[4]  === 0)
assert(neiburrs[3].vector[5]  === 0)
assert(neiburrs[3].vector[6]  === 0)
assert(neiburrs[3].vector[7]  === 0)
assert(neiburrs[3].vector[8]  === 0)
assert(neiburrs[3].vector[9]  === 0)
assert(neiburrs[3].vector[10] === 0)
assert(neiburrs[3].vector[11] === 0)

assert(neiburrs[4].fitness === 10000)
assert(neiburrs[4].vector.length === 12)
assert(neiburrs[4].vector[0]  === 0)
assert(neiburrs[4].vector[1]  === 0)
assert(neiburrs[4].vector[2]  === 5)
assert(neiburrs[4].vector[3]  === 0)
assert(neiburrs[4].vector[4]  === 0)
assert(neiburrs[4].vector[5]  === 0)
assert(neiburrs[4].vector[6]  === 0)
assert(neiburrs[4].vector[7]  === 0)
assert(neiburrs[4].vector[8]  === 0)
assert(neiburrs[4].vector[9]  === 0)
assert(neiburrs[4].vector[10] === 0)
assert(neiburrs[4].vector[11] === 0)

assert(neiburrs[5].vector.length === 12)
assert(neiburrs[5].vector[0]  === 0)
assert(neiburrs[5].vector[1]  === 0)
assert(neiburrs[5].vector[2]  === -5)
assert(neiburrs[5].vector[3]  === 0)
assert(neiburrs[5].vector[4]  === 0)
assert(neiburrs[5].vector[5]  === 0)
assert(neiburrs[5].vector[6]  === 0)
assert(neiburrs[5].vector[7]  === 0)
assert(neiburrs[5].vector[8]  === 0)
assert(neiburrs[5].vector[9]  === 0)
assert(neiburrs[5].vector[10] === 0)
assert(neiburrs[5].vector[11] === 0)

assert(neiburrs[6].fitness === 10000)
assert(neiburrs[6].vector.length === 12)
assert(neiburrs[6].vector[0]  === 0)
assert(neiburrs[6].vector[1]  === 0)
assert(neiburrs[6].vector[2]  === 0)
assert(neiburrs[6].vector[3]  === 5)
assert(neiburrs[6].vector[4]  === 0)
assert(neiburrs[6].vector[5]  === 0)
assert(neiburrs[6].vector[6]  === 0)
assert(neiburrs[6].vector[7]  === 0)
assert(neiburrs[6].vector[8]  === 0)
assert(neiburrs[6].vector[9]  === 0)
assert(neiburrs[6].vector[10] === 0)
assert(neiburrs[6].vector[11] === 0)

assert(neiburrs[7].fitness === 10000)
assert(neiburrs[7].vector.length === 12)
assert(neiburrs[7].vector[0]  === 0)
assert(neiburrs[7].vector[1]  === 0)
assert(neiburrs[7].vector[2]  === 0)
assert(neiburrs[7].vector[3]  === -5)
assert(neiburrs[7].vector[4]  === 0)
assert(neiburrs[7].vector[5]  === 0)
assert(neiburrs[7].vector[6]  === 0)
assert(neiburrs[7].vector[7]  === 0)
assert(neiburrs[7].vector[8]  === 0)
assert(neiburrs[7].vector[9]  === 0)
assert(neiburrs[7].vector[10] === 0)
assert(neiburrs[7].vector[11] === 0)

assert(neiburrs[8].fitness === 10000)
assert(neiburrs[8].vector.length === 12)
assert(neiburrs[8].vector[0]  === 0)
assert(neiburrs[8].vector[1]  === 0)
assert(neiburrs[8].vector[2]  === 0)
assert(neiburrs[8].vector[3]  === 0)
assert(neiburrs[8].vector[4]  === 5)
assert(neiburrs[8].vector[5]  === 0)
assert(neiburrs[8].vector[6]  === 0)
assert(neiburrs[8].vector[7]  === 0)
assert(neiburrs[8].vector[8]  === 0)
assert(neiburrs[8].vector[9]  === 0)
assert(neiburrs[8].vector[10] === 0)
assert(neiburrs[8].vector[11] === 0)

assert(neiburrs[9].fitness === 10000)
assert(neiburrs[9].vector.length === 12)
assert(neiburrs[9].vector[0]  === 0)
assert(neiburrs[9].vector[1]  === 0)
assert(neiburrs[9].vector[2]  === 0)
assert(neiburrs[9].vector[3]  === 0)
assert(neiburrs[9].vector[4]  === -5)
assert(neiburrs[9].vector[5]  === 0)
assert(neiburrs[9].vector[6]  === 0)
assert(neiburrs[9].vector[7]  === 0)
assert(neiburrs[9].vector[8]  === 0)
assert(neiburrs[9].vector[9]  === 0)
assert(neiburrs[9].vector[10] === 0)
assert(neiburrs[9].vector[11] === 0)

assert(neiburrs[10].fitness === 10000)
assert(neiburrs[10].vector.length === 12)
assert(neiburrs[10].vector[0]  === 0)
assert(neiburrs[10].vector[1]  === 0)
assert(neiburrs[10].vector[2]  === 0)
assert(neiburrs[10].vector[3]  === 0)
assert(neiburrs[10].vector[4]  === 0)
assert(neiburrs[10].vector[5]  === 5)
assert(neiburrs[10].vector[6]  === 0)
assert(neiburrs[10].vector[7]  === 0)
assert(neiburrs[10].vector[8]  === 0)
assert(neiburrs[10].vector[9]  === 0)
assert(neiburrs[10].vector[10] === 0)
assert(neiburrs[10].vector[11] === 0)

assert(neiburrs[11].fitness === 10000)
assert(neiburrs[11].vector.length === 12)
assert(neiburrs[11].vector[0]  === 0)
assert(neiburrs[11].vector[1]  === 0)
assert(neiburrs[11].vector[2]  === 0)
assert(neiburrs[11].vector[3]  === 0)
assert(neiburrs[11].vector[4]  === 0)
assert(neiburrs[11].vector[5]  === -5)
assert(neiburrs[11].vector[6]  === 0)
assert(neiburrs[11].vector[7]  === 0)
assert(neiburrs[11].vector[8]  === 0)
assert(neiburrs[11].vector[9]  === 0)
assert(neiburrs[11].vector[10] === 0)
assert(neiburrs[11].vector[11] === 0)

assert(neiburrs[12].fitness === 10000)
assert(neiburrs[12].vector.length === 12)
assert(neiburrs[12].vector[0]  === 0)
assert(neiburrs[12].vector[1]  === 0)
assert(neiburrs[12].vector[2]  === 0)
assert(neiburrs[12].vector[3]  === 0)
assert(neiburrs[12].vector[4]  === 0)
assert(neiburrs[12].vector[5]  === 0)
assert(neiburrs[12].vector[6]  === 5)
assert(neiburrs[12].vector[7]  === 0)
assert(neiburrs[12].vector[8]  === 0)
assert(neiburrs[12].vector[9]  === 0)
assert(neiburrs[12].vector[10] === 0)
assert(neiburrs[12].vector[11] === 0)

assert(neiburrs[13].fitness === 10000)
assert(neiburrs[13].vector.length === 12)
assert(neiburrs[13].vector[0]  === 0)
assert(neiburrs[13].vector[1]  === 0)
assert(neiburrs[13].vector[2]  === 0)
assert(neiburrs[13].vector[3]  === 0)
assert(neiburrs[13].vector[4]  === 0)
assert(neiburrs[13].vector[5]  === 0)
assert(neiburrs[13].vector[6]  === -5)
assert(neiburrs[13].vector[7]  === 0)
assert(neiburrs[13].vector[8]  === 0)
assert(neiburrs[13].vector[9]  === 0)
assert(neiburrs[13].vector[10] === 0)
assert(neiburrs[13].vector[11] === 0)

assert(neiburrs[14].fitness === 10000)
assert(neiburrs[14].vector.length === 12)
assert(neiburrs[14].vector[0]  === 0)
assert(neiburrs[14].vector[1]  === 0)
assert(neiburrs[14].vector[2]  === 0)
assert(neiburrs[14].vector[3]  === 0)
assert(neiburrs[14].vector[4]  === 0)
assert(neiburrs[14].vector[5]  === 0)
assert(neiburrs[14].vector[6]  === 0)
assert(neiburrs[14].vector[7]  === 5)
assert(neiburrs[14].vector[8]  === 0)
assert(neiburrs[14].vector[9]  === 0)
assert(neiburrs[14].vector[10] === 0)
assert(neiburrs[14].vector[11] === 0)

assert(neiburrs[15].fitness === 10000)
assert(neiburrs[15].vector.length === 12)
assert(neiburrs[15].vector[0]  === 0)
assert(neiburrs[15].vector[1]  === 0)
assert(neiburrs[15].vector[2]  === 0)
assert(neiburrs[15].vector[3]  === 0)
assert(neiburrs[15].vector[4]  === 0)
assert(neiburrs[15].vector[5]  === 0)
assert(neiburrs[15].vector[6]  === 0)
assert(neiburrs[15].vector[7]  === -5)
assert(neiburrs[15].vector[8]  === 0)
assert(neiburrs[15].vector[9]  === 0)
assert(neiburrs[15].vector[10] === 0)
assert(neiburrs[15].vector[11] === 0)

assert(neiburrs[16].fitness === 10000)
assert(neiburrs[16].vector.length === 12)
assert(neiburrs[16].vector[0]  === 0)
assert(neiburrs[16].vector[1]  === 0)
assert(neiburrs[16].vector[2]  === 0)
assert(neiburrs[16].vector[3]  === 0)
assert(neiburrs[16].vector[4]  === 0)
assert(neiburrs[16].vector[5]  === 0)
assert(neiburrs[16].vector[6]  === 0)
assert(neiburrs[16].vector[7]  === 0)
assert(neiburrs[16].vector[8]  === 5)
assert(neiburrs[16].vector[9]  === 0)
assert(neiburrs[16].vector[10] === 0)
assert(neiburrs[16].vector[11] === 0)

assert(neiburrs[17].fitness === 10000)
assert(neiburrs[17].vector.length === 12)
assert(neiburrs[17].vector[0]  === 0)
assert(neiburrs[17].vector[1]  === 0)
assert(neiburrs[17].vector[2]  === 0)
assert(neiburrs[17].vector[3]  === 0)
assert(neiburrs[17].vector[4]  === 0)
assert(neiburrs[17].vector[5]  === 0)
assert(neiburrs[17].vector[6]  === 0)
assert(neiburrs[17].vector[7]  === 0)
assert(neiburrs[17].vector[8]  === -5)
assert(neiburrs[17].vector[9]  === 0)
assert(neiburrs[17].vector[10] === 0)
assert(neiburrs[17].vector[11] === 0)

assert(neiburrs[18].fitness === 10000)
assert(neiburrs[18].vector.length === 12)
assert(neiburrs[18].vector[0]  === 0)
assert(neiburrs[18].vector[1]  === 0)
assert(neiburrs[18].vector[2]  === 0)
assert(neiburrs[18].vector[3]  === 0)
assert(neiburrs[18].vector[4]  === 0)
assert(neiburrs[18].vector[5]  === 0)
assert(neiburrs[18].vector[6]  === 0)
assert(neiburrs[18].vector[7]  === 0)
assert(neiburrs[18].vector[8]  === 0)
assert(neiburrs[18].vector[9]  === 5)
assert(neiburrs[18].vector[10] === 0)
assert(neiburrs[18].vector[11] === 0)

assert(neiburrs[19].fitness === 10000)
assert(neiburrs[19].vector.length === 12)
assert(neiburrs[19].vector[0]  === 0)
assert(neiburrs[19].vector[1]  === 0)
assert(neiburrs[19].vector[2]  === 0)
assert(neiburrs[19].vector[3]  === 0)
assert(neiburrs[19].vector[4]  === 0)
assert(neiburrs[19].vector[5]  === 0)
assert(neiburrs[19].vector[6]  === 0)
assert(neiburrs[19].vector[7]  === 0)
assert(neiburrs[19].vector[8]  === 0)
assert(neiburrs[19].vector[9]  === -5)
assert(neiburrs[19].vector[10] === 0)
assert(neiburrs[19].vector[11] === 0)

assert(neiburrs[20].fitness === 10000)
assert(neiburrs[20].vector.length === 12)
assert(neiburrs[20].vector[0]  === 0)
assert(neiburrs[20].vector[1]  === 0)
assert(neiburrs[20].vector[2]  === 0)
assert(neiburrs[20].vector[3]  === 0)
assert(neiburrs[20].vector[4]  === 0)
assert(neiburrs[20].vector[5]  === 0)
assert(neiburrs[20].vector[6]  === 0)
assert(neiburrs[20].vector[7]  === 0)
assert(neiburrs[20].vector[8]  === 0)
assert(neiburrs[20].vector[9]  === 0)
assert(neiburrs[20].vector[10] === 5)
assert(neiburrs[20].vector[11] === 0)

assert(neiburrs[21].fitness === 10000)
assert(neiburrs[21].vector.length === 12)
assert(neiburrs[21].vector[0]  === 0)
assert(neiburrs[21].vector[1]  === 0)
assert(neiburrs[21].vector[2]  === 0)
assert(neiburrs[21].vector[3]  === 0)
assert(neiburrs[21].vector[4]  === 0)
assert(neiburrs[21].vector[5]  === 0)
assert(neiburrs[21].vector[6]  === 0)
assert(neiburrs[21].vector[7]  === 0)
assert(neiburrs[21].vector[8]  === 0)
assert(neiburrs[21].vector[9]  === 0)
assert(neiburrs[21].vector[10] === -5)
assert(neiburrs[21].vector[11] === 0)

assert(neiburrs[22].fitness === 10000)
assert(neiburrs[22].vector.length === 12)
assert(neiburrs[22].vector[0]  === 0)
assert(neiburrs[22].vector[1]  === 0)
assert(neiburrs[22].vector[2]  === 0)
assert(neiburrs[22].vector[3]  === 0)
assert(neiburrs[22].vector[4]  === 0)
assert(neiburrs[22].vector[5]  === 0)
assert(neiburrs[22].vector[6]  === 0)
assert(neiburrs[22].vector[7]  === 0)
assert(neiburrs[22].vector[8]  === 0)
assert(neiburrs[22].vector[9]  === 0)
assert(neiburrs[22].vector[10] === 0)
assert(neiburrs[22].vector[11] === 5)

assert(neiburrs[23].fitness === 10000)
assert(neiburrs[23].vector.length === 12)
assert(neiburrs[23].vector[0]  === 0)
assert(neiburrs[23].vector[1]  === 0)
assert(neiburrs[23].vector[2]  === 0)
assert(neiburrs[23].vector[3]  === 0)
assert(neiburrs[23].vector[4]  === 0)
assert(neiburrs[23].vector[5]  === 0)
assert(neiburrs[23].vector[6]  === 0)
assert(neiburrs[23].vector[7]  === 0)
assert(neiburrs[23].vector[8]  === 0)
assert(neiburrs[23].vector[9]  === 0)
assert(neiburrs[23].vector[10] === 0)
assert(neiburrs[23].vector[11] === -5)

// neiburr test
assert(vector[0]  === 0)
assert(vector[1]  === 0)
assert(vector[2]  === 0)
assert(vector[3]  === 0)
assert(vector[4]  === 0)
assert(vector[5]  === 0)
assert(vector[6]  === 0)
assert(vector[7]  === 0)
assert(vector[8]  === 0)
assert(vector[9]  === 0)
assert(vector[10] === 0)
assert(vector[11] === 0)

let neiburr = algo_mod.neighbor({ problem: { valid: _ => 1, fitness: _ => 20000 } }, _ => 1, { vector: vector })

assert(neiburr.fitness === 20000)
assert(neiburr.vector.length === 12)
assert(neiburr.vector[0]  === 0)
assert(neiburr.vector[1]  === 0)
assert(neiburr.vector[2]  === 0)
assert(neiburr.vector[3]  === 0)
assert(neiburr.vector[4]  === 0)
assert(neiburr.vector[5]  === 0)
assert(neiburr.vector[6]  === 0)
assert(neiburr.vector[7]  === 0)
assert(neiburr.vector[8]  === 0)
assert(neiburr.vector[9]  === 0)
assert(neiburr.vector[10] === 0)
assert(neiburr.vector[11] === 5)

// classes tests
let algo1 = new algo_mod.docking_harmony_search({ valid: _ => 1, fitness: _ => 30000 }, 2)
let algo2 = new algo_mod.docking_tabu_search({ valid: _ => 1, fitness: _ => 40000 }, 2)
let algo3 = new algo_mod.docking_simulated_annealing({ valid: _ => 1, fitness: _ => 50000 }, 2)
let algo4 = new algo_mod.docking_giterative_improvement({ valid: _ => 1, fitness: _ => 60000 }, 2)

assert(algo1.neighbor({ vector: vector }).fitness === 30000)
assert(algo1.neighbors({ vector: vector }).length === 24)

assert(algo2.neighbor({ vector: vector }).fitness === 40000)
assert(algo2.neighbors({ vector: vector }).length === 24)

assert(algo3.neighbor({ vector: vector }).fitness === 50000)
assert(algo3.neighbors({ vector: vector }).length === 24)

assert(algo4.neighbor({ vector: vector }).fitness === 60000)
assert(algo4.neighbors({ vector: vector }).length === 24)